1. Mobile app
2. Raw TCP Socket connection (for complete offline usage and p2p pairing)
3. QR Code based device pairing
4. notification listening (Client), transmitting
5. Desktop app
6. notification listening (server)
7. displaying notification (toast notification)

ðŸ”¹ Phase 1: QR Code-Based Pairing & Authentication
Goal: Ensure a secure and seamless pairing process before starting notification transmission.

âœ… 1. Desktop Generates a Pairing Code

Start a local TCP server and generate a unique pairing token (random key or IP).
Encode this pairing data as a QR Code.
âœ… 2. Android App Scans the QR Code

Use Androidâ€™s Camera API to scan the QR Code.
Extract IP Address & Authentication Key.
Store pairing data for future use.
âœ… 3. Establish Secure Connection with Authentication

When connecting, Android sends the authentication key to the desktop.
The desktop validates it before accepting notifications.
ðŸ”¹ Checkpoint:
At this stage, only authorized devices will be able to send notifications.

ðŸ”¹ Phase 2: Basic TCP Communication & Notification Capture
âœ… 4. Set Up the TCP Server (Desktop)

Start a TCP server that listens only for paired & authenticated devices.
âœ… 5. Android Notification Listener Service

Capture notifications using the Notification Listener Service.
âœ… 6. Securely Transmit Notifications

Send notification data only if authentication is successful.
The server rejects unpaired devices.
ðŸ”¹ Checkpoint:
Now, notifications will be sent securely and only from authorized devices.

ðŸ”¹ Phase 3: Auto-Reconnect & Auto-Start
âœ… 7. Store Authentication & Auto-Reconnect

Save the pairing data and auto-reconnect when both devices are on the same Wi-Fi.
âœ… 8. Run the Desktop App in Background

Auto-start the TCP server on system boot.
âœ… 9. Run Android App in Background

Keep the service running as a Foreground Service to avoid being killed.
ðŸ”¹ Checkpoint:
At this stage, the app will work automatically without user intervention.

